main backend code lies here all code is in python language uses flask


from flask import Flask, render_template, request, session, redirect, url_for
from datetime import date
import mysql.connector

app = Flask(__name__, static_url_path='/static')

# MySQL connection
mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  password="",
  database="lib_dat"
)

# Admin pages
@app.route('/admin')
def admin_home():
    logged_in = False
    if 'username' not in request.cookies:
        return redirect(url_for('admin_login'))
    return render_template('admin_home.html', logged_in=logged_in)

@app.route('/admin/login', methods=['GET', 'POST'])
def admin_login():
    if 'username' in request.cookies:
        return redirect(url_for('admin_home'))
    if request.method == 'POST':
        # TODO: Implement login functionality
        username = request.form['username']
        password = request.form['password']
        cursor = mydb.cursor()
        query = "SELECT * FROM users WHERE username=%s AND password=%s"
        values = (username, password)
        cursor.execute(query, values)
        result = cursor.fetchone()
        if result is not None:
            response = redirect(url_for('admin_home'))
            response.set_cookie('username', username)
            return response
        else:
            return render_template('admin_login.html', error='Invalid login')
    else:
        return render_template('admin_login.html')

@app.route('/logout')
def logout():
    response = redirect(url_for('admin_login'))
    response.delete_cookie('username')
    return response

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        # TODO: Implement registration functionality
        username = request.form['username']
        password = request.form['password']
        cursor = mydb.cursor()
        query = "INSERT INTO users (username, password) VALUES (%s, %s)"
        values = (username, password)
        cursor.execute(query, values)
        mydb.commit()
        return redirect('/admin/login')
    else:
        return render_template('register.html')

# Other admin routes...

# Search Student by student ID
@app.route('/search_student_by_id', methods=['GET', 'POST'])
def search_student_by_id():
    if 'username' not in request.cookies:
        return redirect(url_for('admin_login'))
    if request.method == 'POST':
        student_id = request.form['student_id']
        cursor = mydb.cursor()
        query = "SELECT name FROM students WHERE student_id=%s"
        values = (student_id,)
        cursor.execute(query, values)
        result = cursor.fetchone()
        if result is not None:
            student_name = result[0]
            query = "SELECT book_name FROM books_borrowed WHERE student_id=%s AND status = 'True'"
            values = (student_id,)
            cursor.execute(query, values)
            results = cursor.fetchall()
            books_borrowed = [result[0] for result in results]
            return render_template('search_student_by_id_result.html',student_id=student_id, student_name=student_name, books_borrowed=books_borrowed)
        else:
            return render_template('search_student_by_id.html', error='Student ID not found')
    else:
        return render_template('search_student_by_id.html')

# Search book by book name
@app.route('/search_book_by_name', methods=['GET', 'POST'])
def search_book_by_name():
    if 'username' not in request.cookies:
        return redirect(url_for('admin_login'))
    if request.method == 'POST':
        book_name = request.form['book_name']
        cursor = mydb.cursor()
        query = "SELECT * FROM books WHERE book_name LIKE '%"+book_name+"%'"
        cursor.execute(query)
        results = cursor.fetchall()
        if len(results) > 0:
            book_details = []
            for result in results:
                book_details.append({
                    'book_name': result[0],
                    'author_name': result[1],
                    'barcode': result[2],
                    'book_color': result[3],
                    'book_quantity': result[4],
                    'book_image_front_url': result[5],
                    'book_image_back_url': result[6],
                    'student_id': result[7]
                })
            print(book_details)
            return render_template('search_book_by_name_result.html', book_details=book_details)
        else:
            return render_template('search_book_by_name.html', error='Book not found')
    else:
        return render_template('search_book_by_name.html')
    
@app.route('/ledger')
def view_ledger():
    if 'username' not in request.cookies:
        return redirect(url_for('admin_login'))
    
    cursor = mydb.cursor()
    query = "SELECT * FROM books_borrowed"
    cursor.execute(query)
    results = cursor.fetchall()
    
    entries = []
    for result in results:
        entry = {
            'book_name': result[0],
            'student_id': result[1],
            'borrow_date': result[2],
            'return_date': result[4],
            'status': result[3]
        }
        entries.append(entry)
    
    return render_template('ledger.html', entries=entries)


@app.route('/add_book', methods=['GET', 'POST'])
def add_book():
    if 'username' not in request.cookies:
        return redirect(url_for('admin_login'))
    if request.method == 'POST':
        book_name = request.form['book_name']
        author_name = request.form['author_name']
        barcode = request.form['barcode']
        book_color = request.form['book_color']
        book_quantity = request.form['book_quantity']
        book_image_front_url = request.form['book_image_front_url']
        book_image_back_url = request.form['book_image_back_url']
        cursor = mydb.cursor()
        query = "INSERT INTO books (book_name, author_name, barcode, book_color, book_quantity, book_image_front_url, book_image_back_url) VALUES (%s, %s, %s, %s, %s, %s, %s)"
        values = (book_name, author_name, barcode, book_color, book_quantity, book_image_front_url, book_image_back_url)
        cursor.execute(query, values)
        mydb.commit()
        return render_template('add_book.html', message='Book added successfully')
    else:
        return render_template('add_book.html')
    
@app.route('/edit_book', methods=['GET', 'POST'])
def edit_book():
    if 'username' not in request.cookies:
        return redirect(url_for('admin_login'))

    if request.method == 'POST':
        barcode = request.form['barcode']
        book_name = request.form['book_name']
        author_name = request.form['author_name']
        book_color = request.form['book_color']
        book_quantity = request.form['book_quantity']
        book_image_front_url = request.form['book_image_front_url']
        book_image_back_url = request.form['book_image_back_url']
        cursor = mydb.cursor()
        query = "UPDATE books SET book_name=%s, author_name=%s, book_color=%s, book_quantity=%s, book_image_front_url=%s, book_image_back_url=%s WHERE barcode=%s"
        values = (book_name, author_name, book_color, book_quantity, book_image_front_url, book_image_back_url, barcode)
        cursor.execute(query, values)
        mydb.commit()
        return render_template('edit_book.html', message='Book details updated successfully')
    else:
        return render_template('edit_book.html')
    
@app.route('/')
def main_page():
    return render_template('main_page.html')

@app.route('/student_mode')
def student_mode():
    return render_template('student_mode.html')

@app.route('/student_mode/search_book', methods=['GET', 'POST'])
def search_book():
    if request.method == 'POST':
        search_term = request.form['search_term']
        cursor = mydb.cursor()
        query = "SELECT book_name, author_name, book_image_front_url, book_quantity FROM books WHERE book_name LIKE '%" + search_term + "%' OR book_color LIKE '%" + search_term + "%'"
        cursor.execute(query)
        result = cursor.fetchall()
        if result:
            return render_template('search_book.html', books=result)
        else:
            return render_template('search_book.html', error='Book not found')
    else:
        return render_template('search_book.html')

@app.route('/student_mode/borrow_book',methods=['GET', 'POST'])
def borrow_book():
    if request.method == 'POST':
        book_name = request.form['barcode']
        student_id = request.form['student_id']
        
        # Check if the book is available
        cursor = mydb.cursor()
        query = "SELECT * FROM books WHERE barcode=%s AND book_quantity > 0"
        cursor.execute(query, (book_name,))
        result = cursor.fetchone()
        
        if result is not None:
            # Book is available, borrow it
            query = "UPDATE books SET book_quantity = book_quantity - 1 WHERE barcode = %s"
            query2 = "INSERT INTO books_borrowed (book_name, student_id, date, status) VALUES (%s, %s, %s, %s)"
            cursor.execute(query2, (book_name, student_id, date.today(), "True"))
            cursor.execute(query,  (book_name,))
            mydb.commit()
            return render_template('borrow_book.html', success=f"You have successfully borrowed {book_name}")
        else:
            # Book is not available
            return render_template('borrow_book.html', error=f"{book_name} is currently not available")
    else:
        return render_template('borrow_book.html')

@app.route('/return_book', methods=['GET', 'POST'])
def return_book():
    if request.method == 'POST':
        book_name = request.form['barcode']
        student_id = request.form['student_id']
        cursor = mydb.cursor()
        query = "SELECT * FROM books_borrowed WHERE book_name = %s AND student_id = %s AND status = 'True'"
        values = (book_name, student_id)
        cursor.execute(query, values)
        result = cursor.fetchone()
        if result is not None:
            query = "UPDATE books_borrowed SET status = 'False', return_date = %s WHERE book_name = %s AND student_id = %s AND status = 'True'"
            query2 = "UPDATE books SET book_quantity = book_quantity + 1 WHERE barcode = %s"
            values = (date.today(), book_name, student_id)
            cursor.execute(query, values)
            cursor.execute(query2,  (book_name,))
            mydb.commit()
            return render_template('return_book.html', message='Book returned successfully')
        else:
            return render_template('return_book.html', error='You did not borrow this book')
    else:
        return render_template('return_book.html')

if __name__ == '__main__':
    app.secret_key = 'supersecretkey'
    app.run(debug=True)
